name: Build and Deploy

on:
  push:
    branches:
      - main
  workflow_run:
    workflows: ["Code Quality and Testing"]
    types:
      - completed
    branches:
      - main

env:
  REGISTRY: docker.io
  IMAGE_NAME: california-housing

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'push' }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: deployment/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Update docker-compose for deployment
      run: |
        # Update docker-compose.yml with the new image
        sed -i "s|image: california-housing:latest|image: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest|g" deployment/docker-compose.yml

    - name: Test the built image locally
      run: |
        # Run a quick test of the built image
        docker run -d --name test-container -p 5003:5000 ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
        
        # Wait for the container to start
        sleep 15
        
        # Check if the container is running
        docker ps -a | grep test-container 
        
        # Test health endpoint
        curl -f http://localhost:5000/health || exit 1
        
        # Clean up
        docker stop test-container
        docker rm test-container
        
        echo "âœ… Image test completed successfully"

    - name: Deploy to staging
      run: |
        echo "ðŸš€ Deploying to staging environment..."
        # Here you would typically deploy to your staging environment
        # For this demo, we'll simulate deployment
        echo "Deployment configuration updated"
        echo "Image: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest"
        echo "âœ… Staging deployment completed"

    - name: Run integration tests
      run: |
        echo "ðŸ§ª Running integration tests..."
        # Start the application for testing
        docker run -d --name integration-test -p 5004:5000 ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
        sleep 15
        
        # Test various endpoints
        curl -f http://localhost:5000/health
        
        # Test prediction endpoint
        curl -X POST http://localhost:5004/api/predict \
          -H "Content-Type: application/json" \
          -d '{"longitude":-122.23,"latitude":37.88,"housing_median_age":41.0,"total_rooms":880.0,"total_bedrooms":129.0,"population":322.0,"households":126.0,"median_income":8.3252,"ocean_proximity":"NEAR BAY"}'
        
        # Clean up
        docker stop integration-test
        docker rm integration-test
        
        echo "âœ… Integration tests passed"

    - name: Notify deployment
      run: |
        echo "ðŸ“¢ Deployment Summary:"
        echo "- Image: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest"
        echo "- Build: ${{ github.sha }}"
        echo "- Branch: ${{ github.ref_name }}"
        echo "- Status: âœ… Success"